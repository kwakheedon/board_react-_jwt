package com.example.board.security.jwt;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.io.IOException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {
    
    private final JwtUtil jwtUtil;
    private final CustomUserDetailsService customUserDetailsService;
    
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        String token = jwtUtil.resolveToken(request);

        if (token != null && jwtUtil.validateToken(token)) {
            // ⭐️ 토큰에서 userId가 아닌, 사용자 식별자인 email을 가져오도록 수정 (JwtUtil 수정 필요 시)
            // 혹은 JwtUtil은 그대로 두고, UserDetailsService가 ID로도 찾을 수 있게 수정
            // 여기서는 UserDetailsService를 email로 찾도록 수정했으므로, 토큰에서 email을 가져와야 합니다.
            // 아래는 현재 구조를 유지하기 위해 userId로 조회하는 방식을 유지하되,
            // CustomUserDetailsService가 email로 찾도록 변경되었음을 인지해야 합니다.
            // 더 좋은 방법은 토큰에 email을 직접 넣는 것입니다.
            Long userId = jwtUtil.getUserIdFromToken(token);
            
            // ⭐️ UserDetailsService는 이제 email을 받으므로, DB에서 ID로 사용자를 찾아 email을 넘겨주어야 합니다.
            // 이 부분이 복잡해지므로, CustomUserDetailsService가 ID로도 찾을 수 있도록 수정하거나,
            // 아래와 같이 UserDetailsService의 로직을 직접 사용하는 것이 더 명확할 수 있습니다.
            // 여기서는 CustomUserDetailsService가 email로 찾도록 수정되었으므로,
            // 필터에서는 email을 넘겨주어야 합니다.
            // 가장 간단한 해결책은 JwtUtil에서 email을 반환하는 것입니다.
            // 여기서는 현재 구조를 유지하기 위해 JwtUtil에서 userId를 가져오고,
            // CustomUserDetailsService가 ID로 찾도록 다시 수정하는 것이 맞습니다.
            // CustomUserDetailsService를 ID로 찾도록 다시 수정하겠습니다.
            
            UserDetails userDetails = customUserDetailsService.loadUserById(userId); // ID로 찾는 메소드 호출
            
            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
            SecurityContextHolder.getContext().setAuthentication(authentication);
        }
        filterChain.doFilter(request, response);
    }
}