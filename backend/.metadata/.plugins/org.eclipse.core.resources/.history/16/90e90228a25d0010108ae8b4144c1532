package com.example.board.domain.comment;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.board.domain.comment.dto.CommentReq;
import com.example.board.domain.member.Member;
import com.example.board.domain.member.MemberRepository;
import com.example.board.domain.post.Post;
import com.example.board.domain.post.PostRepository;
import com.example.board.exception.CustomException;
import com.example.board.exception.ErrorCode;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class CommentService {
	private final CommentRepository commentRepository;
	private final MemberRepository memberRepository;
	private final PostRepository postRepository;
	
	@Transactional
    public void createComment(CommentReq req, String email) {
        // 정보를 이메일로 조회
        Member member = memberRepository.findByEmail(email)
                .orElseThrow(() -> new CustomException(ErrorCode.USER_NOT_FOUND, "사용자를 찾을 수 없습니다."));

        //댓글을 달 게시글(Post)을 postId로 조회
        Post post = postRepository.findById(req.getPostId())
                .orElseThrow(() -> new CustomException(ErrorCode.RESOURCE_NOT_FOUND, "댓글을 작성할 게시글이 없습니다."));

        // 빌더를 사용하여 새로운 Comment 엔티티를 생성
        Comment comment = Comment.builder()
                .content(req.getContent())
                .member(member) // 작성자 정보 설정
                .post(post)     // 게시글 정보 설정
                .build();
        
        // 4. 생성된 댓글을 데이터베이스에 저장합니다.
        commentRepository.save(comment);
    }

}


