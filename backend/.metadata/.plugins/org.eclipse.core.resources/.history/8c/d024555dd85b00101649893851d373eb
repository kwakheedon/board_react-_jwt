package com.example.board.domain.member;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.board.domain.member.dto.LoginReq;
import com.example.board.domain.member.dto.LoginRes;
import com.example.board.domain.member.dto.SignUpReq;
import com.example.board.exception.CustomException;
import com.example.board.exception.ErrorCode;
import org.springframework.transaction.annotation.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class MemberService {
	private final MemberRepository memberRepository;
	private final PasswordEncoder passwordEncoder;
	
	//회원가입
	@Transactional
	public void signup(SignUpReq request) {
		if (memberRepository.existsByEmail(request.getEmail())) {
			throw new CustomException(ErrorCode.USER_ALREADY_EXISTS, "이미 사용 중인 이메일입니다.");
		}
		String encryptedPassword = passwordEncoder.encode(request.getPassword());
		Member member = Member.builder().email(request.getEmail()).password(encryptedPassword) // 암호화된 비밀번호를 저장
				.nickname(request.getNickname()).role(Role.user).build();
		memberRepository.save(member);
	}
	
	// 로그인
	@Transactional(readOnly = true)
	public LoginRes login(LoginReq loginReq) {
	    Member member = memberRepository.findByEmail(loginReq.getEmail())
	            .orElseThrow(() -> new CustomException(ErrorCode.LOGIN_FAIL, "이메일 또는 비밀번호가 일치하지 않습니다."));
	    if (!passwordEncoder.matches(loginReq.getPassword(), member.getPassword())) {
	        throw new CustomException(ErrorCode.LOGIN_FAIL, "이메일 또는 비밀번호가 일치하지 않습니다.");
	    }
	    return new LoginRes(member.getEmail(), member.getNickname(), member.getRole());
	}
}