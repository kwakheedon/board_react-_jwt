package com.example.board.domain.member;

import com.example.board.domain.member.dto.LoginReq;
import com.example.board.domain.member.dto.SignUpReq;
import com.example.board.exception.CustomException;
import com.example.board.exception.ErrorCode;
import com.example.board.security.jwt.JwtUtil;
import com.example.board.security.jwt.TokenResponse;
import org.springframework.transaction.annotation.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class MemberService {
    private final MemberRepository memberRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtUtil jwtUtil;

    // 회원가입
    @Transactional
    public void signup(SignUpReq request) {
        if (memberRepository.existsByEmail(request.getEmail())) {
            throw new CustomException(ErrorCode.USER_ALREADY_EXISTS, "이미 사용 중인 이메일입니다.");
        }
        String encryptedPassword = passwordEncoder.encode(request.getPassword());
        Member member = Member.builder()
                .email(request.getEmail())
                .password(encryptedPassword)
                .nickname(request.getNickname())
                .role(Role.USER) 
                .build();
        memberRepository.save(member);
    }
    
    // 로그인
    @Transactional
    public TokenResponse login(LoginReq loginReq) {
        Member member = memberRepository.findByEmail(loginReq.getEmail())
                .orElseThrow(() -> new CustomException(ErrorCode.LOGIN_FAIL, "이메일 또는 비밀번호가 일치하지 않습니다."));
        if (!passwordEncoder.matches(loginReq.getPassword(), member.getPassword())) {
            throw new CustomException(ErrorCode.LOGIN_FAIL, "이메일 또는 비밀번호가 일치하지 않습니다.");
        }
        // Access Token과 Refresh Token을 생성합니다.
        String accessToken = jwtUtil.generateAccessToken(member.getEmail(), member.getRole());
        String refreshTokenValue = jwtUtil.generateRefreshToken(member.getEmail());

        // Refresh Token을 DB에 저장/업데이트합니다.
        member.updateRefreshToken(refreshTokenValue);
        
        return new TokenResponse(accessToken, refreshTokenValue);
    }
    
   
}


