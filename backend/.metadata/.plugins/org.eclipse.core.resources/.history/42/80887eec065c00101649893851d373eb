package com.example.board.security.jwt;


import com.example.board.domain.member.Role;
import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;
import jakarta.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import java.security.Key;
import java.util.Base64;
import java.util.Date;

@Value("${jwt.secret.key}")
private String secretKey;

@Value("${jwt.access.token.expiration.ms}")
private long accessTokenExpirationMs;

@Value("${jwt.refresh.token.expiration.ms}")
private long refreshTokenExpirationMs;

private Key signingKey;

@PostConstruct
public void init() {
    // application.properties의 secretKey는 Base64로 인코딩된 값이어야 합니다.
    byte[] keyBytes = Base64.getDecoder().decode(secretKey);
    this.signingKey = Keys.hmacShaKeyFor(keyBytes);
}

// 토큰 생성 (주체: email)
public String generateAccessToken(String email, Role role) {
    Date now = new Date();
    Claims claims = Jwts.claims().setSubject(email);
    claims.put(AUTHORIZATION_KEY, role.getKey());

    return Jwts.builder()
            .setClaims(claims)
            .setIssuedAt(now)
            .setExpiration(new Date(now.getTime() + accessTokenExpirationMs))
            .signWith(signingKey, SignatureAlgorithm.HS256)
            .compact();
}
    /**
     * Refresh Token 생성 (주체를 email로 변경)
     */
    public String generateRefreshToken(String email) {
        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + refreshTokenExpirationMs);

        return Jwts.builder()
                .setSubject(email)
                .setIssuedAt(now)
                .setExpiration(expiryDate)
                .signWith(signingKey, SignatureAlgorithm.HS256)
                .compact();
    }

    public String resolveToken(HttpServletRequest request) {
        String bearerToken = request.getHeader(AUTHORIZATION_HEADER);
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith(BEARER_PREFIX)) {
            return bearerToken.substring(7);
        }
        return null;
    }

    public boolean validateToken(String token) {
        try {
            Jwts.parserBuilder().setSigningKey(signingKey).build().parseClaimsJws(token);
            return true;
        } catch (SecurityException | MalformedJwtException e) {
            log.warn("Invalid JWT signature, 유효하지 않은 JWT 서명 입니다.");
        } catch (ExpiredJwtException e) {
            log.warn("Expired JWT token, 만료된 JWT token 입니다.");
        } catch (UnsupportedJwtException e) {
            log.warn("Unsupported JWT token, 지원되지 않는 JWT 토큰 입니다.");
        } catch (IllegalArgumentException e) {
            log.warn("JWT claims is empty, 잘못된 JWT 토큰 입니다.");
        }
        return false;
    }

    public Claims getClaimsFromToken(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(signingKey)
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    /**
     * 토큰에서 사용자 이메일을 추출합니다.
     */
    public String getEmailFromToken(String token) {
        return getClaimsFromToken(token).getSubject();
    }
}
