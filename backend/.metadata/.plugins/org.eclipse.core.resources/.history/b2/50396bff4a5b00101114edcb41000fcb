//package com.example.board.security.jwt;
//
//import com.example.board.domain.member.Role;
//import io.jsonwebtoken.Claims;
//import io.jsonwebtoken.Jwts;
//import io.jsonwebtoken.SignatureAlgorithm;
//import io.jsonwebtoken.security.Keys;
//import jakarta.annotation.PostConstruct;
//import jakarta.servlet.http.HttpServletRequest;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.beans.factory.annotation.Value;
//import org.springframework.stereotype.Component;
//
//import java.nio.charset.StandardCharsets;
//import java.security.Key;
//import java.util.Date;
//
//
//@Slf4j
//@Component
//public class JwtUtil {
//
//    public static final String AUTHORIZATION_HEADER = "Authorization";
//    public static final String BEARER_PREFIX = "Bearer ";
//
//    @Value("${jwt.secret}")
//    private String secretKey;
//    @Value("${jwt.access-token-expiration-ms}")
//    private long accessTokenExpirationMs;
//    @Value("${jwt.refresh-token-expiration-ms}")
//    private long refreshTokenExpirationMs;
//
//    private Key signingKey;
//
//    @PostConstruct
//    public void init() {
//        byte[] keyBytes = secretKey.getBytes(StandardCharsets.UTF_8);
//        this.signingKey = Keys.hmacShaKeyFor(keyBytes);
//    }
//
//    
//    //사용자의 ID와 역할을 받아 Access Token을 생성합니다.
//    public String generateAccessToken(Long memberId, Role role) {
//        Claims claims = Jwts.claims().setSubject(String.valueOf(memberId));
//        claims.put("role", role.name()); // 역할 정보를 클레임에 추가
//        Date now = new Date();
//        return Jwts.builder()
//                .setClaims(claims)
//                .setIssuedAt(now)
//                .setExpiration(new Date(now.getTime() + accessTokenExpirationMs))
//                .signWith(signingKey, SignatureAlgorithm.HS256)
//                .compact();
//    }
//
//    
//    //사용자의 ID를 받아 Refresh Token을 생성합니다.
//    public String generateRefreshToken(Long memberId) {
//        Date now = new Date();
//        return Jwts.builder()
//                .setSubject(String.valueOf(memberId))
//                .setIssuedAt(now)
//                .setExpiration(new Date(now.getTime() + refreshTokenExpirationMs))
//                .signWith(signingKey, SignatureAlgorithm.HS256)
//                .compact();
//    }
//
// 
//    //HTTP 요청 헤더에서 "Bearer " 접두사를 제거하고 순수 토큰만 추출합니다.
//    public String resolveToken(HttpServletRequest request) {
//        String bearerToken = request.getHeader(AUTHORIZATION_HEADER);
//        if (bearerToken != null && bearerToken.startsWith(BEARER_PREFIX)) {
//            return bearerToken.substring(7);
//        }
//        return null;
//    }
//
//    
//    //토큰이 유효한지(서명, 만료 시간 등) 검증합니다.
//    public boolean validateToken(String token) {
//        try {
//            Jwts.parserBuilder().setSigningKey(signingKey).build().parseClaimsJws(token);
//            return true;
//        } catch (Exception e) {
//            log.error("Invalid JWT token: {}", e.getMessage());
//            return false;
//        }
//    }
//
//  
//    //토큰에서 사용자의 ID를 추출합니다.
//    public Long getUserIdFromToken(String token) {
//        return Long.parseLong(Jwts.parserBuilder().setSigningKey(signingKey).build()
//                .parseClaimsJws(token).getBody().getSubject());
//    }
//}
